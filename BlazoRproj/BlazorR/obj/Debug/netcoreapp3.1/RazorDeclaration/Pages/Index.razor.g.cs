#pragma checksum "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f816f47cb97a9e171b97b9d89d50f0c08fc9e733"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazoR.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\_Imports.razor"
using BlazoR;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\Pages\Index.razor"
using BlazoR.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\Pages\Index.razor"
using BlazoR.Domain.Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 92 "C:\Users\Arleard\Documents\GitHub\BlazorR\BlazoRproj\BlazorR\Pages\Index.razor"
      
    private bool CommentaryIsOpen = false;
    private Dictionary<Post, int> currImageInPost = new Dictionary<Post, int>();
    private Post currentPost = new Post();
    private int currentPage = 1;
    const int pagesCount = 10;
    private string myComment;

    List<Comment> comments = new List<Comment>();
    List<Post> posts;

    protected void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    protected void DeletePost(Post post)
    {
        PostService.DeletePost(post);
    }

    protected void PreviousImage(Post post)
    {
        if (currImageInPost[post] > 0)
        {
            currImageInPost[post]--;
        }
        else
        {
            currImageInPost[post] = post.Images.Count - 1;
        }
    }

    protected void NextImage(Post post)
    {
        if (currImageInPost[post] < post.Images.Count - 1)
        {
            currImageInPost[post]++;
        }
        else
        {
            currImageInPost[post] = 0;
        }
    }

    protected void NextPage()
    {
        if (posts.Count == pagesCount)
        {
            currentPage++;
        }

    }

    protected override void OnInitialized()
    {
        posts = PostService.GetPosts();
        foreach (var post in posts)
        {
            currImageInPost.Add(post, 0);
        }
        base.OnInitialized();
    }

    protected void OpenComments(Post post)
    {
        if (CommentaryIsOpen && post == currentPost)
        {
            CommentaryIsOpen = false;
        }
        else
        {
            currentPost = post;
            CommentaryIsOpen = true;
            comments = CommentService.GetComments(post);
        }

    }

    protected void SendNewComment(Post post, string userName)
    {
        if (myComment != "")
        {
            var text = myComment;
            CommentService.AddNewComment(text, post, userName);
            comments = CommentService.GetComments(post);
            myComment = "";
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CommentService CommentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PostService PostService { get; set; }
    }
}
#pragma warning restore 1591
