@page "/"

@using BlazoR.Shared
@using BlazoR.Domain.Models
@inject PostService PostService
@inject CommentService CommentService


    <div class="container">
        @foreach (var post in posts)
        {
            <div class="card">
                <div class="card-body">
                    <h1 class="card-title">@post.Header</h1>
                    <p class="card-text">@post.Text</p>
                    <p class="card-text"><small class="text-muted">@post.Sender</small></p>
                </div>
                <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
                    <div class="carousel-inner">
                        @for (int i = 0; i < post.Images.Count; i++)
                        {
                            if (currImageInPost[post] == i)
                            {
                                <div class="carousel-item active">
                                    <img class="img d-block w-100" src="@post.Images[i]">
                                </div>
                            }
                            else
                            {
                                <div class="img carousel-item">
                                    <img class="d-block w-100" src="@post.Images[i]">
                                </div>
                            }
                        }
                    </div>
                    @if (post.Images.Count > 1)
                    {
                        <a @onclick="@(e => PreviousImage(post))" class="carousel-control-prev" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a @onclick="@(e => NextImage(post))" class="carousel-control-next" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    }
                </div>
            </div>
            <br />

            <button class="btn btn-primary" @onclick="@(e => OpenComments(post))">Комментарии</button> 
            <br />
            <br />
            @if (currentPost == post && CommentaryIsOpen)
            {
                <ul>
                    @if (comments != null)
                    {
                        @foreach (var comment in comments)
                        {
                            <li>@comment.Sender : @comment.Text</li>
                        }
                    }
                </ul>
                <input required @bind="myComment" />
                <button class="btn btn-secondary" @onclick="@(e => SendNewComment(post))">Отправить</button>
            }
            <hr />
        }

        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                <li class="page-item">
                    <a class="page-link" @onclick="PreviousPage">Previous</a>
                </li>
                <li class="page-item"><a class="page-link" href="#">@currentPage</a></li>

                <li class="page-item">
                    <a class="page-link" @onclick="NextPage">Next</a>
                </li>
            </ul>
        </nav>
    </div>


@code{
    private bool CommentaryIsOpen = false;
    private Dictionary<Post, int> currImageInPost = new Dictionary<Post, int>();
    private Post currentPost = new Post();
    private int currentPage = 1;
    const int pagesCount = 10;
    private string myComment;

    List<Comment> comments = new List<Comment>();
    List<Post> posts;

    protected void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    protected void PreviousImage(Post post)
    {
        if (currImageInPost[post] > 0)
        {
            currImageInPost[post]--;
        }
        else
        {
            currImageInPost[post] = post.Images.Count - 1;
        }
    }

    protected void NextImage(Post post)
    {
        if (currImageInPost[post] < post.Images.Count - 1)
        {
            currImageInPost[post]++;
        }
        else
        {
            currImageInPost[post] = 0;
        }
    }

    protected void NextPage()
    {
        if (posts.Count == pagesCount)
        {
            currentPage++;
        }

    }

    protected override void OnInitialized()
    {
        posts = PostService.GetPosts();
        foreach (var post in posts)
        {
            currImageInPost.Add(post, 0);
        }
        base.OnInitialized();
    }

    protected void OpenComments(Post post)
    {
        if (CommentaryIsOpen && post == currentPost)
        {
            CommentaryIsOpen = false;
        }
        else
        {
            CommentaryIsOpen = true;
            comments = CommentService.GetComments(post);
            currentPost = post;
        }

    }

    protected void SendNewComment(Post post)
    {
        if (myComment != "")
        {
            var text = myComment;
            CommentService.AddNewComment(text, post);
            comments = CommentService.GetComments(post);
            myComment = "";
        }
    }
}